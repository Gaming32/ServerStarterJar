import java.nio.file.Files

plugins {
    id 'java'
    id 'maven-publish'
    id 'me.modmuss50.mod-publish-plugin' version '0.5.1'
}

group = 'net.neoforged'

var describe = new ByteArrayOutputStream()
project.exec {
    commandLine('git', 'describe')
    standardOutput = describe
}
final splitVersion = describe.toString().trim().split('-')
if (splitVersion[0].split('\\.').length == 2) {
    println("Version: ${version = (splitVersion[0] + '.' + splitVersion[1])}")
} else {
    var splitVer = splitVersion[0].split('\\.')
    println("Version: ${version = (splitVer[0] + '.' + splitVer[1] + (splitVer[2] as int + splitVersion[1] as int))}")
}

base {
    archivesName = 'server'
}

repositories {
    mavenCentral()
}

dependencies {
    compileOnly 'org.jetbrains:annotations:24.1.0'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(16)
    }
}

compileJava {
    options.compilerArgs.addAll([
        '--add-exports=java.base/java.lang=net.neoforged.serverstarterjar',
        '--add-exports=java.base/jdk.internal.loader=net.neoforged.serverstarterjar',
        '--add-exports=java.base/jdk.internal.module=net.neoforged.serverstarterjar',
        '--add-exports=java.base/java.nio.file.spi=net.neoforged.serverstarterjar',
    ])
}

jar {
    archiveFileName = 'server.jar'
    manifest.attributes([
            'Implementation-Version': project.version.toString(),
            'Main-Class'            : 'net.neoforged.serverstarterjar.Main',
            'Add-Opens'             : 'java.base/java.lang java.base/jdk.internal.loader java.base/jdk.internal.module java.base/java.nio.file.spi'
    ])
}

tasks.register('updateServerJar') {
    dependsOn(tasks.jar)
    doFirst {
        var targetPath = rootProject.file('testing/server.jar').toPath()
        Files.deleteIfExists(targetPath)
        Files.copy(tasks.jar.archiveFile.get().asFile.toPath(), targetPath)
    }
}

var lastCommitMessage = new ByteArrayOutputStream()
project.exec {
    commandLine('git log -1 --pretty=%B'.split(' '))
    standardOutput = lastCommitMessage
}
publishMods {
    file = tasks.jar.archiveFile
    modLoaders.addAll('forge', 'neoforge')
    getChangelog().set(lastCommitMessage.toString().trim())
    type = STABLE
    github {
        accessToken = providers.environmentVariable('GITHUB_TOKEN')
        repository = 'neoforged/ServerStarterJar'
        commitish = 'main'
    }
}

test.enabled = false
